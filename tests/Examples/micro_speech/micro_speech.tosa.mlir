// TODO(#176): re-enable after we remove the need to fully unroll loops
// Old command: heir-opt --heir-tosa-to-arith %s | FileCheck %s
// For now, just trivially run heir-opt and parse it.
// RUN: heir-opt %s

// The model should be converted into one that only contains affine and math
// operations, with no loops and no intermediate memref allocations.

// CHECK-NOT: affine.for
// CHECK-NOT: affine.load %{{alloc\[}}
#map = affine_map<(d0, d1, d2, d3) -> (d3)>
#map1 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
#map2 = affine_map<(d0, d1) -> (d1)>
#map3 = affine_map<(d0, d1) -> (d0, d1)>
#map4 = affine_map<(d0, d1) -> (d0, 0)>
module {
  func.func @main(%arg0: tensor<1x1960xi8>) -> tensor<1x4xi8> attributes {tf.entry_function = {inputs = "Reshape_1", outputs = "labels_softmax"}} {
    %cst = arith.constant dense<[-374, 169, -48, 208, 82, 6, -1201, -694]> : tensor<8xi32>
    %cst_0 = arith.constant dense<[427, -518, -94, 186]> : tensor<4xi32>
    %cst_1 = arith.constant dense<"0xtensor<513xi16>
    %cst_2 = arith.constant dense<"0xtensor<513xi16>
    %cst_3 = arith.constant dense<"0xtensor<513xi16>
    %cst_4 = arith.constant dense<"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000100010001000100010001000200020002000200020003000300030004000400050005000600060007000800080009000A000B000C000E000F00110012001400160018001A001D002000230026002A002E00330038003D00430049005000580061006A0074007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F007F00"> : tensor<513xi16>
    %cst_5 = arith.constant dense<35> : tensor<1x1xi32>
    %cst_6 = arith.constant dense<4> : tensor<1x1xi32>
    %cst_7 = arith.constant dense<536870912> : tensor<1x1xi32>
    %cst_8 = arith.constant dense<1515870810> : tensor<1x1xi32>
    %cst_9 = arith.constant dense<-1010580540> : tensor<1x1xi32>
    %cst_10 = arith.constant dense<12> : tensor<1x1xi32>
    %cst_11 = arith.constant dense<7> : tensor<1x1xi32>
    %cst_12 = arith.constant dense<1> : tensor<1x1xi32>
    %cst_13 = arith.constant dense<9> : tensor<1x1xi32>
    %cst_14 = arith.constant dense<17> : tensor<1x1xi32>
    %cst_15 = arith.constant dense<"0xtensor<10x8x1x8xi8>
    %c-128_i8 = arith.constant -128 : i8
    %c0_i32 = arith.constant 0 : i32
    %c-128_i32 = arith.constant -128 : i32
    %cst_16 = arith.constant dense<[1653229999, 1516545207, 2000799311, 1159928266, 1498403863, 1285645282, 2146175029, 1756589032]> : tensor<8xi32>
    %cst_17 = arith.constant dense<[41, 43, 41, 41, 41, 41, 41, 41]> : tensor<8xi8>
    %c1_i64 = arith.constant 1 : i64
    %c31_i32 = arith.constant 31 : i32
    %c1073741824_i64 = arith.constant 1073741824 : i64
    %c-1073741824_i64 = arith.constant -1073741824 : i64
    %c127_i32 = arith.constant 127 : i32
    %c14_i32 = arith.constant 14 : i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c-32768_i32 = arith.constant -32768 : i32
    %c32767_i32 = arith.constant 32767 : i32
    %c32768_i32 = arith.constant 32768 : i32
    %c7_i32 = arith.constant 7 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst_18 = arith.constant dense<"tensor<4000x4xi8>
    %c1932201080_i64 = arith.constant 1932201080 : i64
    %c42_i64 = arith.constant 42 : i64
    %c2199023255552_i64 = arith.constant 2199023255552 : i64
    %c30_i64 = arith.constant 30 : i64
    %c536870912_i64 = arith.constant 536870912 : i64
    %c23_i64 = arith.constant 23 : i64
    %c4194304_i64 = arith.constant 4194304 : i64
    %c31_i64 = arith.constant 31 : i64
    %expanded = tensor.expand_shape %arg0 [[0], [1, 2, 3]] output_shape [1, 49, 40, 1] : tensor<1x1960xi8> into tensor<1x49x40x1xi8>
    %padded = tensor.pad %expanded low[0, 4, 3, 0] high[0, 5, 3, 0] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %c-128_i8 : i8
    } : tensor<1x49x40x1xi8> to tensor<1x58x46x1xi8>
    %0 = tensor.empty() : tensor<1x25x20x1x8xi32>
    %1 = linalg.fill ins(%c0_i32 : i32) outs(%0 : tensor<1x25x20x1x8xi32>) -> tensor<1x25x20x1x8xi32>
    %2 = tensor.empty() : tensor<1x25x20x8xi32>
    %3 = linalg.depthwise_conv_2d_nhwc_hwcm_q {dilations = dense<1> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins(%padded, %cst_15, %c-128_i32, %c0_i32 : tensor<1x58x46x1xi8>, tensor<10x8x1x8xi8>, i32, i32) outs(%1 : tensor<1x25x20x1x8xi32>) -> tensor<1x25x20x1x8xi32>
    %collapsed = tensor.collapse_shape %3 [[0], [1], [2], [3, 4]] : tensor<1x25x20x1x8xi32> into tensor<1x25x20x8xi32>
    %4 = linalg.generic {indexing_maps = [#map, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cst, %collapsed : tensor<8xi32>, tensor<1x25x20x8xi32>) outs(%2 : tensor<1x25x20x8xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.addi %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x25x20x8xi32>
    %5 = tensor.empty() : tensor<1x25x20x8xi8>
    %6 = linalg.generic {indexing_maps = [#map1, #map, #map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4, %cst_16, %cst_17 : tensor<1x25x20x8xi32>, tensor<8xi32>, tensor<8xi8>) outs(%5 : tensor<1x25x20x8xi8>) {
    ^bb0(%in: i32, %in_23: i32, %in_24: i8, %out: i8):
      %56 = arith.extui %in_24 : i8 to i32
      %57 = arith.extsi %in : i32 to i64
      %58 = arith.extsi %in_23 : i32 to i64
      %59 = arith.muli %57, %58 : i64
      %60 = arith.extui %in_24 : i8 to i64
      %61 = arith.shli %c1_i64, %60 : i64
      %62 = arith.shrui %61, %c1_i64 : i64
      %63 = arith.addi %59, %62 : i64
      %64 = arith.cmpi sge, %in, %c0_i32 : i32
      %65 = arith.select %64, %c1073741824_i64, %c-1073741824_i64 : i64
      %66 = arith.addi %65, %63 : i64
      %67 = arith.cmpi sgt, %56, %c31_i32 : i32
      %68 = arith.select %67, %66, %63 : i64
      %69 = arith.shrsi %68, %60 : i64
      %70 = arith.trunci %69 : i64 to i32
      %71 = arith.addi %70, %c-128_i32 : i32
      %72 = arith.maxsi %71, %c-128_i32 : i32
      %73 = arith.minsi %72, %c127_i32 : i32
      %74 = arith.trunci %73 : i32 to i8
      linalg.yield %74 : i8
    } -> tensor<1x25x20x8xi8>
    %collapsed_19 = tensor.collapse_shape %6 [[0], [1, 2, 3]] : tensor<1x25x20x8xi8> into tensor<1x4000xi8>
    %7 = tensor.empty() : tensor<1x4xi32>
    %8 = linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel"]} ins(%cst_0 : tensor<4xi32>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i32, %out: i32):
      linalg.yield %in : i32
    } -> tensor<1x4xi32>
    %9 = linalg.quantized_matmul ins(%collapsed_19, %cst_18, %c-128_i32, %c0_i32 : tensor<1x4000xi8>, tensor<4000x4xi8>, i32, i32) outs(%8 : tensor<1x4xi32>) -> tensor<1x4xi32>
    %10 = tensor.empty() : tensor<1x4xi8>
    %11 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%9 : tensor<1x4xi32>) outs(%10 : tensor<1x4xi8>) {
    ^bb0(%in: i32, %out: i8):
      %56 = arith.extsi %in : i32 to i64
      %57 = arith.muli %56, %c1932201080_i64 : i64
      %58 = arith.addi %57, %c2199023255552_i64 : i64
      %59 = arith.cmpi sge, %in, %c0_i32 : i32
      %60 = arith.select %59, %c1073741824_i64, %c-1073741824_i64 : i64
      %61 = arith.addi %60, %58 : i64
      %62 = arith.shrsi %61, %c42_i64 : i64
      %63 = arith.trunci %62 : i64 to i32
      %64 = arith.addi %63, %c14_i32 : i32
      %65 = arith.maxsi %64, %c-128_i32 : i32
      %66 = arith.minsi %65, %c127_i32 : i32
      %67 = arith.trunci %66 : i32 to i8
      linalg.yield %67 : i8
    } -> tensor<1x4xi8>
    %12 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%11 : tensor<1x4xi8>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i8, %out: i32):
      %56 = arith.extsi %in : i8 to i32
      %57 = arith.subi %56, %c14_i32 : i32
      %58 = arith.extsi %57 : i32 to i64
      %59 = arith.muli %58, %c1073741824_i64 : i64
      %60 = arith.addi %59, %c536870912_i64 : i64
      %61 = arith.shrsi %60, %c30_i64 : i64
      %62 = arith.trunci %61 : i64 to i32
      linalg.yield %62 : i32
    } -> tensor<1x4xi32>
    %13 = tensor.empty() : tensor<1xi32>
    %14 = linalg.fill ins(%c-2147483648_i32 : i32) outs(%13 : tensor<1xi32>) -> tensor<1xi32>
    %reduced = linalg.reduce ins(%12 : tensor<1x4xi32>) outs(%14 : tensor<1xi32>) dimensions = [1]
      (%in: i32, %init: i32) {
        %56 = arith.maxsi %in, %init : i32
        linalg.yield %56 : i32
      }
    %expanded_20 = tensor.expand_shape %reduced [[0, 1]] output_shape [1, 1] : tensor<1xi32> into tensor<1x1xi32>
    %15 = linalg.generic {indexing_maps = [#map3, #map4, #map3], iterator_types = ["parallel", "parallel"]} ins(%12, %expanded_20 : tensor<1x4xi32>, tensor<1x1xi32>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.subi %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x4xi32>
    %16 = tensor.empty() : tensor<1x4xi16>
    %17 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%15 : tensor<1x4xi32>) outs(%16 : tensor<1x4xi16>) {
    ^bb0(%in: i32, %out: i16):
      %56 = arith.extsi %in : i32 to i64
      %57 = arith.muli %56, %c1073741824_i64 : i64
      %58 = arith.addi %57, %c4194304_i64 : i64
      %59 = arith.shrsi %58, %c23_i64 : i64
      %60 = arith.trunci %59 : i64 to i32
      %61 = arith.maxsi %60, %c-32768_i32 : i32
      %62 = arith.minsi %61, %c32767_i32 : i32
      %63 = arith.trunci %62 : i32 to i16
      linalg.yield %63 : i16
    } -> tensor<1x4xi16>
    %18 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%17 : tensor<1x4xi16>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i16, %out: i32):
      %56 = arith.extsi %in : i16 to i32
      %57 = arith.addi %56, %c32768_i32 : i32
      %58 = arith.shrui %57, %c7_i32 : i32
      %59 = arith.andi %57, %c127_i32 : i32
      %60 = arith.addi %58, %c1_i32 : i32
      %61 = arith.index_cast %58 : i32 to index
      %62 = arith.index_cast %60 : i32 to index
      %extracted = tensor.extract %cst_4[%61] : tensor<513xi16>
      %extracted_23 = tensor.extract %cst_4[%62] : tensor<513xi16>
      %63 = arith.extsi %extracted : i16 to i32
      %64 = arith.extsi %extracted_23 : i16 to i32
      %65 = arith.shli %63, %c7_i32 : i32
      %66 = arith.subi %64, %63 : i32
      %67 = arith.muli %66, %59 : i32
      %68 = arith.addi %65, %67 : i32
      linalg.yield %68 : i32
    } -> tensor<1x4xi32>
    %19 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%17 : tensor<1x4xi16>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i16, %out: i32):
      %56 = arith.extsi %in : i16 to i32
      %57 = arith.addi %56, %c32768_i32 : i32
      %58 = arith.shrui %57, %c7_i32 : i32
      %59 = arith.andi %57, %c127_i32 : i32
      %60 = arith.addi %58, %c1_i32 : i32
      %61 = arith.index_cast %58 : i32 to index
      %62 = arith.index_cast %60 : i32 to index
      %extracted = tensor.extract %cst_3[%61] : tensor<513xi16>
      %extracted_23 = tensor.extract %cst_3[%62] : tensor<513xi16>
      %63 = arith.extsi %extracted : i16 to i32
      %64 = arith.extsi %extracted_23 : i16 to i32
      %65 = arith.shli %63, %c7_i32 : i32
      %66 = arith.subi %64, %63 : i32
      %67 = arith.muli %66, %59 : i32
      %68 = arith.addi %65, %67 : i32
      linalg.yield %68 : i32
    } -> tensor<1x4xi32>
    %20 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%17 : tensor<1x4xi16>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i16, %out: i32):
      %56 = arith.extsi %in : i16 to i32
      %57 = arith.addi %56, %c32768_i32 : i32
      %58 = arith.shrui %57, %c7_i32 : i32
      %59 = arith.andi %57, %c127_i32 : i32
      %60 = arith.addi %58, %c1_i32 : i32
      %61 = arith.index_cast %58 : i32 to index
      %62 = arith.index_cast %60 : i32 to index
      %extracted = tensor.extract %cst_2[%61] : tensor<513xi16>
      %extracted_23 = tensor.extract %cst_2[%62] : tensor<513xi16>
      %63 = arith.extsi %extracted : i16 to i32
      %64 = arith.extsi %extracted_23 : i16 to i32
      %65 = arith.shli %63, %c7_i32 : i32
      %66 = arith.subi %64, %63 : i32
      %67 = arith.muli %66, %59 : i32
      %68 = arith.addi %65, %67 : i32
      linalg.yield %68 : i32
    } -> tensor<1x4xi32>
    %21 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%17 : tensor<1x4xi16>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i16, %out: i32):
      %56 = arith.extsi %in : i16 to i32
      %57 = arith.addi %56, %c32768_i32 : i32
      %58 = arith.shrui %57, %c7_i32 : i32
      %59 = arith.andi %57, %c127_i32 : i32
      %60 = arith.addi %58, %c1_i32 : i32
      %61 = arith.index_cast %58 : i32 to index
      %62 = arith.index_cast %60 : i32 to index
      %extracted = tensor.extract %cst_1[%61] : tensor<513xi16>
      %extracted_23 = tensor.extract %cst_1[%62] : tensor<513xi16>
      %63 = arith.extsi %extracted : i16 to i32
      %64 = arith.extsi %extracted_23 : i16 to i32
      %65 = arith.shli %63, %c7_i32 : i32
      %66 = arith.subi %64, %63 : i32
      %67 = arith.muli %66, %59 : i32
      %68 = arith.addi %65, %67 : i32
      linalg.yield %68 : i32
    } -> tensor<1x4xi32>
    %22 = linalg.generic {indexing_maps = [#map3, #map4, #map3], iterator_types = ["parallel", "parallel"]} ins(%18, %cst_14 : tensor<1x4xi32>, tensor<1x1xi32>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.shli %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x4xi32>
    %23 = linalg.generic {indexing_maps = [#map3, #map4, #map3], iterator_types = ["parallel", "parallel"]} ins(%19, %cst_13 : tensor<1x4xi32>, tensor<1x1xi32>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.shli %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x4xi32>
    %24 = linalg.generic {indexing_maps = [#map3, #map4, #map3], iterator_types = ["parallel", "parallel"]} ins(%20, %cst_12 : tensor<1x4xi32>, tensor<1x1xi32>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.shli %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x4xi32>
    %25 = linalg.generic {indexing_maps = [#map3, #map4, #map3], iterator_types = ["parallel", "parallel"]} ins(%21, %cst_11 : tensor<1x4xi32>, tensor<1x1xi32>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.shrsi %in, %in_23 : i32
      %57 = arith.cmpi sgt, %in_23, %c0_i32 : i32
      %58 = arith.subi %in_23, %c1_i32 : i32
      %59 = arith.shrsi %in, %58 : i32
      %60 = arith.trunci %59 : i32 to i1
      %61 = arith.andi %57, %60 : i1
      %62 = arith.extui %61 : i1 to i32
      %63 = arith.addi %56, %62 : i32
      linalg.yield %63 : i32
    } -> tensor<1x4xi32>
    %26 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%22, %23 : tensor<1x4xi32>, tensor<1x4xi32>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.addi %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x4xi32>
    %27 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%26, %24 : tensor<1x4xi32>, tensor<1x4xi32>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.addi %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x4xi32>
    %28 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%27, %25 : tensor<1x4xi32>, tensor<1x4xi32>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.addi %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x4xi32>
    %29 = linalg.generic {indexing_maps = [#map3, #map4, #map3], iterator_types = ["parallel", "parallel"]} ins(%28, %cst_10 : tensor<1x4xi32>, tensor<1x1xi32>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.shrsi %in, %in_23 : i32
      %57 = arith.cmpi sgt, %in_23, %c0_i32 : i32
      %58 = arith.subi %in_23, %c1_i32 : i32
      %59 = arith.shrsi %in, %58 : i32
      %60 = arith.trunci %59 : i32 to i1
      %61 = arith.andi %57, %60 : i1
      %62 = arith.extui %61 : i1 to i32
      %63 = arith.addi %56, %62 : i32
      linalg.yield %63 : i32
    } -> tensor<1x4xi32>
    %30 = linalg.fill ins(%c0_i32 : i32) outs(%13 : tensor<1xi32>) -> tensor<1xi32>
    %reduced_21 = linalg.reduce ins(%29 : tensor<1x4xi32>) outs(%30 : tensor<1xi32>) dimensions = [1]
      (%in: i32, %init: i32) {
        %56 = arith.addi %in, %init : i32
        linalg.yield %56 : i32
      }
    %expanded_22 = tensor.expand_shape %reduced_21 [[0, 1]] output_shape [1, 1] : tensor<1xi32> into tensor<1x1xi32>
    %31 = tensor.empty() : tensor<1x1xi32>
    %32 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%expanded_22 : tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %out: i32):
      %56 = math.ctlz %in : i32
      linalg.yield %56 : i32
    } -> tensor<1x1xi32>
    %33 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%32, %cst_12 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.subi %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x1xi32>
    %34 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%expanded_22, %33 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.shli %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x1xi32>
    %35 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%34, %cst_9 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.extsi %in : i32 to i64
      %57 = arith.extsi %in_23 : i32 to i64
      %58 = arith.muli %56, %57 : i64
      %59 = arith.addi %58, %c1073741824_i64 : i64
      %60 = arith.shrsi %59, %c31_i64 : i64
      %61 = arith.trunci %60 : i64 to i32
      linalg.yield %61 : i32
    } -> tensor<1x1xi32>
    %36 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%35, %cst_8 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.addi %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x1xi32>
    %37 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%36, %34 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.extsi %in : i32 to i64
      %57 = arith.extsi %in_23 : i32 to i64
      %58 = arith.muli %56, %57 : i64
      %59 = arith.addi %58, %c1073741824_i64 : i64
      %60 = arith.shrsi %59, %c31_i64 : i64
      %61 = arith.trunci %60 : i64 to i32
      linalg.yield %61 : i32
    } -> tensor<1x1xi32>
    %38 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%cst_7, %37 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.subi %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x1xi32>
    %39 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%36, %38 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.extsi %in : i32 to i64
      %57 = arith.extsi %in_23 : i32 to i64
      %58 = arith.muli %56, %57 : i64
      %59 = arith.addi %58, %c1073741824_i64 : i64
      %60 = arith.shrsi %59, %c31_i64 : i64
      %61 = arith.trunci %60 : i64 to i32
      linalg.yield %61 : i32
    } -> tensor<1x1xi32>
    %40 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%39, %cst_6 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.muli %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x1xi32>
    %41 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%36, %40 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.addi %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x1xi32>
    %42 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%41, %34 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.extsi %in : i32 to i64
      %57 = arith.extsi %in_23 : i32 to i64
      %58 = arith.muli %56, %57 : i64
      %59 = arith.addi %58, %c1073741824_i64 : i64
      %60 = arith.shrsi %59, %c31_i64 : i64
      %61 = arith.trunci %60 : i64 to i32
      linalg.yield %61 : i32
    } -> tensor<1x1xi32>
    %43 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%cst_7, %42 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.subi %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x1xi32>
    %44 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%41, %43 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.extsi %in : i32 to i64
      %57 = arith.extsi %in_23 : i32 to i64
      %58 = arith.muli %56, %57 : i64
      %59 = arith.addi %58, %c1073741824_i64 : i64
      %60 = arith.shrsi %59, %c31_i64 : i64
      %61 = arith.trunci %60 : i64 to i32
      linalg.yield %61 : i32
    } -> tensor<1x1xi32>
    %45 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%44, %cst_6 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.muli %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x1xi32>
    %46 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%41, %45 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.addi %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x1xi32>
    %47 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%46, %34 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.extsi %in : i32 to i64
      %57 = arith.extsi %in_23 : i32 to i64
      %58 = arith.muli %56, %57 : i64
      %59 = arith.addi %58, %c1073741824_i64 : i64
      %60 = arith.shrsi %59, %c31_i64 : i64
      %61 = arith.trunci %60 : i64 to i32
      linalg.yield %61 : i32
    } -> tensor<1x1xi32>
    %48 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%cst_7, %47 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.subi %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x1xi32>
    %49 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%46, %48 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.extsi %in : i32 to i64
      %57 = arith.extsi %in_23 : i32 to i64
      %58 = arith.muli %56, %57 : i64
      %59 = arith.addi %58, %c1073741824_i64 : i64
      %60 = arith.shrsi %59, %c31_i64 : i64
      %61 = arith.trunci %60 : i64 to i32
      linalg.yield %61 : i32
    } -> tensor<1x1xi32>
    %50 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%49, %cst_6 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.muli %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x1xi32>
    %51 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%46, %50 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.addi %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x1xi32>
    %52 = linalg.generic {indexing_maps = [#map3, #map4, #map3], iterator_types = ["parallel", "parallel"]} ins(%28, %51 : tensor<1x4xi32>, tensor<1x1xi32>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.extsi %in : i32 to i64
      %57 = arith.extsi %in_23 : i32 to i64
      %58 = arith.muli %56, %57 : i64
      %59 = arith.addi %58, %c536870912_i64 : i64
      %60 = arith.shrsi %59, %c30_i64 : i64
      %61 = arith.trunci %60 : i64 to i32
      linalg.yield %61 : i32
    } -> tensor<1x4xi32>
    %53 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%cst_5, %32 : tensor<1x1xi32>, tensor<1x1xi32>) outs(%31 : tensor<1x1xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.subi %in, %in_23 : i32
      linalg.yield %56 : i32
    } -> tensor<1x1xi32>
    %54 = linalg.generic {indexing_maps = [#map3, #map4, #map3], iterator_types = ["parallel", "parallel"]} ins(%52, %53 : tensor<1x4xi32>, tensor<1x1xi32>) outs(%7 : tensor<1x4xi32>) {
    ^bb0(%in: i32, %in_23: i32, %out: i32):
      %56 = arith.shrsi %in, %in_23 : i32
      %57 = arith.cmpi sgt, %in_23, %c0_i32 : i32
      %58 = arith.subi %in_23, %c1_i32 : i32
      %59 = arith.shrsi %in, %58 : i32
      %60 = arith.trunci %59 : i32 to i1
      %61 = arith.andi %57, %60 : i1
      %62 = arith.extui %61 : i1 to i32
      %63 = arith.addi %56, %62 : i32
      linalg.yield %63 : i32
    } -> tensor<1x4xi32>
    %55 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%54 : tensor<1x4xi32>) outs(%10 : tensor<1x4xi8>) {
    ^bb0(%in: i32, %out: i8):
      %56 = arith.extsi %in : i32 to i64
      %57 = arith.muli %56, %c1073741824_i64 : i64
      %58 = arith.addi %57, %c536870912_i64 : i64
      %59 = arith.shrsi %58, %c30_i64 : i64
      %60 = arith.trunci %59 : i64 to i32
      %61 = arith.addi %60, %c-128_i32 : i32
      %62 = arith.maxsi %61, %c-128_i32 : i32
      %63 = arith.minsi %62, %c127_i32 : i32
      %64 = arith.trunci %63 : i32 to i8
      linalg.yield %64 : i8
    } -> tensor<1x4xi8>
    return %55 : tensor<1x4xi8>
  }
}
